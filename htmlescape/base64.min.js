!function() {
  function resolveModule(path) {
    var _ref2;
    var func;
    var len;
    var val;
    var res = [];
    var resLength = 0;
    var cnl = (path = dirname(path)).length;
    var i = 0;
    var padLength = cnl >> 2 << 2;
    for (;i < padLength;) {
      _ref2 = root[path.charAt(i++)];
      func = root[path.charAt(i++)];
      len = root[path.charAt(i++)];
      val = root[path.charAt(i++)];
      res[resLength++] = 255 & (_ref2 << 2 | func >>> 4);
      res[resLength++] = 255 & (func << 4 | len >>> 2);
      res[resLength++] = 255 & (len << 6 | val);
    }
    return 2 == (cnl -= padLength) ? (_ref2 = root[path.charAt(i++)], func = root[path.charAt(i++)], res[resLength++] = 255 & (_ref2 << 2 | func >>> 4)) : 3 == cnl && (_ref2 = root[path.charAt(i++)], func = root[path.charAt(i++)], len = root[path.charAt(i++)], res[resLength++] = 255 & (_ref2 << 2 | func >>> 4), res[resLength++] = 255 & (func << 4 | len >>> 2)), res;
  }
  function result(path, property) {
    return path = dirname(path), (property ? atob : value)(path);
  }
  var str = "not a UTF-8 string";
  var authenticated = "object" == typeof window;
  var view = authenticated ? window : {};
  authenticated = !(authenticated = view.HI_BASE64_NO_WINDOW ? false : authenticated) && "object" == typeof self;
  var ctrl = !view.HI_BASE64_NO_NODE_JS && ("object" == typeof process && (process.versions && process.versions.node));
  authenticated = (ctrl ? view = global : authenticated && (view = self), !view.HI_BASE64_NO_COMMON_JS && ("object" == typeof module && module.exports));
  var o = "function" == typeof define && define.amd;
  var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  var root = {};
  var l = 0;
  for (;l < 64;++l) {
    root[t[l]] = l;
  }
  root["-"] = 62;
  root._ = 63;
  var stream;
  var read;
  var value;
  var dirname = function(path) {
    return path.split("=")[0].replace(/[\r\n]/g, "");
  };
  var expand = function(nodes) {
    var node;
    var parent;
    var child;
    var m = [];
    var n = nodes.length;
    var i = 0;
    var sz = 3 * parseInt(n / 3);
    for (;i < sz;) {
      node = nodes[i++];
      parent = nodes[i++];
      child = nodes[i++];
      m.push(t[node >>> 2], t[63 & (node << 4 | parent >>> 4)], t[63 & (parent << 2 | child >>> 6)], t[63 & child]);
    }
    n -= sz;
    return 1 == n ? (node = nodes[i], m.push(t[node >>> 2], t[node << 4 & 63], "==")) : 2 == n && (node = nodes[i++], parent = nodes[i], m.push(t[node >>> 2], t[63 & (node << 4 | parent >>> 4)], t[parent << 2 & 63], "=")), m.join("");
  };
  var btoa = view.btoa;
  var atob = view.atob;
  var obj = (value = ctrl ? (stream = require("buffer").Buffer, btoa = function(data) {
    return stream.from(data, "ascii").toString("base64");
  }, expand = read = function(chunk) {
    return stream.from(chunk).toString("base64");
  }, atob = function(arg) {
    return stream.from(arg, "base64").toString("ascii");
  }, function(chunk) {
    return stream.from(chunk, "base64").toString();
  }) : btoa ? (read = function(input) {
    var tagNameArr = [];
    var i = 0;
    for (;i < input.length;i++) {
      var c = input.charCodeAt(i);
      if (c < 128) {
        tagNameArr.push(String.fromCharCode(c));
      } else {
        if (c < 2048) {
          tagNameArr.push(String.fromCharCode(192 | c >> 6), String.fromCharCode(128 | 63 & c));
        } else {
          if (c < 55296 || 57344 <= c) {
            tagNameArr.push(String.fromCharCode(224 | c >> 12), String.fromCharCode(128 | c >> 6 & 63), String.fromCharCode(128 | 63 & c));
          } else {
            c = 65536 + ((1023 & c) << 10 | 1023 & input.charCodeAt(++i));
            tagNameArr.push(String.fromCharCode(240 | c >> 18), String.fromCharCode(128 | c >> 12 & 63), String.fromCharCode(128 | c >> 6 & 63), String.fromCharCode(128 | 63 & c));
          }
        }
      }
    }
    return btoa(tagNameArr.join(""));
  }, function(s) {
    var string = atob(s.replace(/-/g, "+").replace(/_/g, "/"));
    if (!/[^\x00-\x7F]/.test(string)) {
      return string;
    }
    var i;
    var c;
    var UNICODE_SPACES = [];
    var counter = 0;
    var length = string.length;
    var _len = 0;
    for (;counter < length;) {
      if ((i = string.charCodeAt(counter++)) <= 127) {
        UNICODE_SPACES.push(String.fromCharCode(i));
      } else {
        if (191 < i && i <= 223) {
          c = 31 & i;
          _len = 1;
        } else {
          if (i <= 239) {
            c = 15 & i;
            _len = 2;
          } else {
            if (!(i <= 247)) {
              throw new Error(str);
            }
            c = 7 & i;
            _len = 3;
          }
        }
        var _i = 0;
        for (;_i < _len;++_i) {
          if ((i = string.charCodeAt(counter++)) < 128 || 191 < i) {
            throw new Error(str);
          }
          c = (c << 6) + (63 & i);
        }
        if (55296 <= c && c <= 57343) {
          throw new Error(str);
        }
        if (1114111 < c) {
          throw new Error(str);
        }
        if (c <= 65535) {
          UNICODE_SPACES.push(String.fromCharCode(c));
        } else {
          c -= 65536;
          UNICODE_SPACES.push(String.fromCharCode(55296 + (c >> 10)), String.fromCharCode(56320 + (1023 & c)));
        }
      }
    }
    return UNICODE_SPACES.join("");
  }) : (btoa = function(bytes) {
    var j;
    var c;
    var eh;
    var m = [];
    var n = bytes.length;
    var i = 0;
    var sz = 3 * parseInt(n / 3);
    for (;i < sz;) {
      j = bytes.charCodeAt(i++);
      c = bytes.charCodeAt(i++);
      eh = bytes.charCodeAt(i++);
      m.push(t[j >>> 2], t[63 & (j << 4 | c >>> 4)], t[63 & (c << 2 | eh >>> 6)], t[63 & eh]);
    }
    n -= sz;
    return 1 == n ? (j = bytes.charCodeAt(i), m.push(t[j >>> 2], t[j << 4 & 63], "==")) : 2 == n && (j = bytes.charCodeAt(i++), c = bytes.charCodeAt(i), m.push(t[j >>> 2], t[63 & (j << 4 | c >>> 4)], t[c << 2 & 63], "=")), m.join("");
  }, read = function(n) {
    var node;
    var parent;
    var child;
    var m = [];
    var nodes = function(input) {
      var res = [];
      var i = 0;
      for (;i < input.length;i++) {
        var key = input.charCodeAt(i);
        if (key < 128) {
          res[res.length] = key;
        } else {
          if (key < 2048) {
            res[res.length] = 192 | key >> 6;
          } else {
            if (key < 55296 || 57344 <= key) {
              res[res.length] = 224 | key >> 12;
            } else {
              key = 65536 + ((1023 & key) << 10 | 1023 & input.charCodeAt(++i));
              res[res.length] = 240 | key >> 18;
              res[res.length] = 128 | key >> 12 & 63;
            }
            res[res.length] = 128 | key >> 6 & 63;
          }
          res[res.length] = 128 | 63 & key;
        }
      }
      return res;
    }(n);
    n = nodes.length;
    var i = 0;
    var sz = 3 * parseInt(n / 3);
    for (;i < sz;) {
      node = nodes[i++];
      parent = nodes[i++];
      child = nodes[i++];
      m.push(t[node >>> 2], t[63 & (node << 4 | parent >>> 4)], t[63 & (parent << 2 | child >>> 6)], t[63 & child]);
    }
    n -= sz;
    return 1 == n ? (node = nodes[i], m.push(t[node >>> 2], t[node << 4 & 63], "==")) : 2 == n && (node = nodes[i++], parent = nodes[i], m.push(t[node >>> 2], t[63 & (node << 4 | parent >>> 4)], t[parent << 2 & 63], "=")), m.join("");
  }, atob = function(input) {
    var _ref2;
    var func;
    var len;
    var val;
    var tagNameArr = [];
    var il = input.length;
    var i = 0;
    var padLength = il >> 2 << 2;
    for (;i < padLength;) {
      _ref2 = root[input.charAt(i++)];
      func = root[input.charAt(i++)];
      len = root[input.charAt(i++)];
      val = root[input.charAt(i++)];
      tagNameArr.push(String.fromCharCode(255 & (_ref2 << 2 | func >>> 4)), String.fromCharCode(255 & (func << 4 | len >>> 2)), String.fromCharCode(255 & (len << 6 | val)));
    }
    il -= padLength;
    return 2 == il ? (_ref2 = root[input.charAt(i++)], func = root[input.charAt(i++)], tagNameArr.push(String.fromCharCode(255 & (_ref2 << 2 | func >>> 4)))) : 3 == il && (_ref2 = root[input.charAt(i++)], func = root[input.charAt(i++)], len = root[input.charAt(i++)], tagNameArr.push(String.fromCharCode(255 & (_ref2 << 2 | func >>> 4)), String.fromCharCode(255 & (func << 4 | len >>> 2)))), tagNameArr.join("");
  }, function(path) {
    var i;
    var c;
    var UNICODE_SPACES = [];
    var resolved = resolveModule(path);
    var nTokens = resolved.length;
    var ti = 0;
    var _len = 0;
    for (;ti < nTokens;) {
      if ((i = resolved[ti++]) <= 127) {
        UNICODE_SPACES.push(String.fromCharCode(i));
      } else {
        if (191 < i && i <= 223) {
          c = 31 & i;
          _len = 1;
        } else {
          if (i <= 239) {
            c = 15 & i;
            _len = 2;
          } else {
            if (!(i <= 247)) {
              throw new Error(str);
            }
            c = 7 & i;
            _len = 3;
          }
        }
        var _i = 0;
        for (;_i < _len;++_i) {
          if ((i = resolved[ti++]) < 128 || 191 < i) {
            throw new Error(str);
          }
          c = (c << 6) + (63 & i);
        }
        if (55296 <= c && c <= 57343) {
          throw new Error(str);
        }
        if (1114111 < c) {
          throw new Error(str);
        }
        if (c <= 65535) {
          UNICODE_SPACES.push(String.fromCharCode(c));
        } else {
          c -= 65536;
          UNICODE_SPACES.push(String.fromCharCode(55296 + (c >> 10)), String.fromCharCode(56320 + (1023 & c)));
        }
      }
    }
    return UNICODE_SPACES.join("");
  }), {
    encode : function(data, callback) {
      var v = "string" != typeof data;
      return v && (data.constructor === view.ArrayBuffer && (data = new Uint8Array(data))), (v ? expand : !callback && /[^\x00-\x7F]/.test(data) ? read : btoa)(data);
    }
  });
  obj.decode = result;
  obj.atob = atob;
  obj.btoa = btoa;
  result.bytes = resolveModule;
  result.string = result;
  if (authenticated) {
    module.exports = obj;
  } else {
    view.base64 = obj;
    if (o) {
      define(function() {
        return obj;
      });
    }
  }
}();
